<?php
  include('./phpqrcode/qrlib.php');
  include('./env.php');
  include('./qr_type.php');

  # execute
  $type = $_POST['type'];
  $data = $_POST['data'];
  $format = $_POST['format'] ?? 'svg';
  render_qr_code($type, $data);

  function render_qr_code($inputType, $data, $format='svg') {
    $content = '';
    switch($inputType) {
      case QR_INPUT_TYPE['TEXT']:
        $content = render_qr_by_text($data);
        break;
      case QR_INPUT_TYPE['URL']:
        $content = render_qr_by_url($data);
        break;
      case QR_INPUT_TYPE['PHONE']:
        $content = render_qr_by_phone($data);
        break;
      case QR_INPUT_TYPE['SMS']:
        $content = render_qr_by_sms($data);
        break;
      case QR_INPUT_TYPE['EMAIL']:
        $content = render_qr_by_email($data);
        break;
      case QR_INPUT_TYPE['SKYPE']:
        $content = render_qr_by_skype($data);
        break;
      case QR_INPUT_TYPE['BUSINESS_CARD']:
        $content = render_qr_by_business_card($data, $data['type']);
        break;
    }
    switch($format) {
      case 'png':
        $back_color = (int) $data['back_color'];
        $fore_color = (int) $data['fore_color'];
        QRcode::png($content, QR_IMAGES_PATH . 'result.' . $format, QR_ECLEVEL_L, 3, 4, FALSE, $back_color, $fore_color);
        break;
      case 'svg':
        $back_color = (int) $data['back_color'];
        $fore_color = (int) $data['fore_color'];
        QRcode::svg($content, QR_IMAGES_PATH . 'result.' . $format, QR_ECLEVEL_L, 3, 4, FALSE, $back_color, $fore_color);
        break;
    }
    echo '/qr_images/result.' . $format;
  }

  function render_qr_by_text($data) {
    return $data['content'];
  }

  function render_qr_by_url($data) {
    return $data['content'];
  }

  function render_qr_by_phone($data) {
    return $data['content'];
  }

  function render_qr_by_sms($data) {
    return 'sms:'.$data['content'];
  }

  function render_qr_by_email($data) {
    return 'mailto:'.$data['email'].'?subject='.$data['subject'].'&body='.$data['body'];
  }

  function render_qr_by_skype($skype) {
    return 'skype:'.$skype.'?call';
  }

  function render_qr_by_business_card($data, $data_type='detailed') {
    switch ($data_type) {
      case 'simple':
        $content  = 'BEGIN:VCARD'."\n";
        $content .= 'FN:'.$data['name']."\n";
        $content .= 'TEL;WORK;VOICE:'.$data['phone']."\n";
        $content .= 'END:VCARD';
        return $content;
        break;
      case 'detailed':
        $content  = 'BEGIN:VCARD'."\n";
        $content .= 'VERSION:2.1'."\n";
        $content .= 'N:'.$data['full_name']."\n";
        $content .= 'ORG:'. 'IMT Solutions'."\n";

        $content .= 'TEL;WORK;VOICE:'.$data['work_phone']."\n";
        $content .= 'TEL;HOME;VOICE:'.$data['private_phone']."\n";
        $content .= 'TEL;TYPE=cell:'.$data['phone_cell']."\n";

        $content .= 'ADR;TYPE=work;'.
          'LABEL="'.$data['address_label'].'"'
          .$data['address_ext'].';'
          .$data['address_street'].';'
          .$data['address_town'].';'
          .$data['address_region'].';'
          .$data['address_postcode'].';'
          .$data['address_country']
        ."\n";

        $content .= 'EMAIL:'.$data['email']."\n";

        $content .= 'END:VCARD';
    
        return $content;
        break;
      case 'photo':
        break;
    }
  }

  function create_qrcode()
  {
      $value = 'http://www.cnblogs.com/txw1958/';//QR code content
      $errorCorrectionLevel = 'H';  //Fault tolerance level
      $matrixPointSize = 6;      //Generate picture size

      //Generate QR code picture
      $path = QR_IMAGES_PATH;//Directory of generated QR code
      if(!file_exists($path)){
          mkdir($path, 0700,true);
      }
      $time = time().'.png';//Generated QR code file name
      $fileName = $path.$time;//1. Path of QR code file generated by assembly
      QRcode::png($value,$fileName , $errorCorrectionLevel, $matrixPointSize, 2);
      $logo = './images/fb.png'; //logo picture ready
      $QR = $fileName;				//Generated original QR code picture file
      if (file_exists($logo)) {
          $QR = imagecreatefromstring(file_get_contents($QR));    //Target image connection resource.
          $logo = imagecreatefromstring(file_get_contents($logo));  //Source image connection resource.
          $QR_width = imagesx($QR);      //QR code picture width
          $QR_height = imagesy($QR);     //QR code image height
          $logo_width = imagesx($logo);    //logo picture width
          $logo_height = imagesy($logo);   //logo image height
          $logo_qr_width = $QR_width / 4;   //Width of logo after combination (1 / 5 of QR code)
          $scale = $logo_width/$logo_qr_width;  //Width scaling ratio of logo (own width / combined width)
          $logo_qr_height = $logo_height/$scale; //Height of logo after combination
          $from_width = ($QR_width - $logo_qr_width) / 2;  //Coordinate point of upper left corner of logo after combination
          //Recombine and resize pictures
          /*
            * imagecopyresampled() Copy a square area from one image (source image) to another
            */
          imagecopyresampled($QR, $logo, $from_width, $from_width, 0, 0, $logo_qr_width,$logo_qr_height, $logo_width, $logo_height);
      }
      //Output pictures
      $time = time().'.png';//Generated QR code file name
      $logo_img_path = $path.$time;
      imagepng($QR, $logo_img_path);
      imagedestroy($QR);
      if(file_exists($logo_img_path)){
          //Generate operation log
          // $this->load->model('qrcode_model');
          // $qrcode = $this->qrcode_model->save($time);
          // if($qrcode){
            $content = 'Add QR code id by';
            // $this->log_model->write_staff_log($content);
            $result = array('ret'=>1);
            echo json_encode($result);
          // }else{
          //     $result = array('ret'=>1,'msg'=>'Save failed');
          //     print json_encode($result);
          // }
      }else{
          $result = array('ret'=>1,'msg'=>'New failure');
          print json_encode($result);
      }
  }

?>